Metadata-Version: 2.1
Name: curadoria
Version: 0.0.244
Summary: Uma tentativa de deploy para um pacote de funções e informações referente à curadoria digital de dados presente no CIDACS
Author-email: Gabriel Lopes <gabriellopes9102@gmail.com>
License: Copyright (c) 2018 The Python Packaging Authority
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/cidacslab/curadoria
Project-URL: Bug Tracker, https://github.com/cidacslab/curadoria/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE

# curadoria package v.0.0.1

## Modules organization

> Dicionarios, Arquivos de Historicidades, Bases de dados,
	.csv, .dbf, .ods, 


./core 
	- common functions shared among the modules
		e.g. extractHeader, readFiles, writeFiles,...,

./descritivas
	- funções relacionadas ao desenvolvimento de descritivas
		e.g. variaveis não nulas, frequência por variáveis, 

./dicionarios
	- funções relacionadas à buscas, escritas e populações de dicionarios

./validacao
	- funções relacionadas a validação de dados.




-- propo2:

./variables
	- tratamento do conteúdo das variáveis, como mudar a apresentação ou testar determinado valor;

./descritivas
	- funções que gerem elementos da especificação de descritivas;

./dicionarios
	- ler arquivo de dicionario, procurar determinada coluna, descrição, alterar segundo determinado conteúdo, e por aí vai;

./validacao
	- procedimentos relacionados à etapa de validação 

./core
	- funções comuns à todos módulos, ou necessário à eles;

	
> fazer de tal forma a usar pela linha de comando.
	ex: generate-hist --meta '../metadata-sinasc' --d '../../dicio-sinasc' --output '.../inspection/historicidade-sinasc.csv'



## project structure

. *example.py* is an example of a module within the package that could contain the logic (functions, classes, constants, etc.) of your package. 

. *pyproject.toml* tells “frontend” build tools like pip and build what “backend” tool to use to create distribution packages for your project.
	
	. *requires* is a list of packages that are needed to build your package. You don’t need to install them; build frontends like pip will install them automatically in a temporary, isolated virtual environment for use during the build process.

	. *build-backend* is the name of the Python object that frontends will use to perform the build.

	. *license* describes the respective license chose for the project/package according to [this documentation](https://choosealicense.com/)


. *tar.gz* file is a source distribution whereas the 
. *whl* file is a built distribution. 


. [*TWINE*](https://packaging.python.org/en/latest/key_projects/#twine) is the primary tool developers use to upload packages to the Python Package Index or other Python package indexes. It is a command-line program that passes program files and metadata to a web API. Developers use it because it’s the official PyPI upload tool, it’s fast and secure, it’s maintained, and it reliably works.


### Uploading package workflow


1. CREATE folder hierarchy with:
	[FOLDER_NAME],
		- src/
			- [package_name]
				. __init__.py
				. example.py
		- tests/

2. CREATE package files:
	[PACKAGE_NAME],
		-LICENSE, pyproject.toml & readme.md

3. CONFIGURE metadata (pyproject.toml, similars to packages.json in NODEjs, readme, and LICENSE)

4. BUILD with python -m build (needs to install such package through -m pip install --upgrade build)
	-m indicates to execute the module as a script, thus, w/o option list.


5. UPLOAD with [twine package](https://packaging.python.org/en/latest/key_projects/#twine)
	> needs to create an account in <https://packaging.python.org/en/latest/key_projects/#twine>

6. INSTALL the new uploaded package and test it out ;-)


[URL_TO_PACKAGE](https://test.pypi.org/project/cidacs-curadoria-example-package-22-08-2022/0.0.1/)






##### token desgramado

. Upar ao Pypi

> pypi-AgENdGVzdC5weXBpLm9yZwIkYzRiMzVmYzktMDk5Yi00MTAyLWEwMDYtM2M5ZmQ4MTMzNmUwAAIleyJwZXJtaXNzaW9ucyI6ICJ1c2VyIiwgInZlcnNpb24iOiAxfQAABiAh8lkfhUYHaTIkDEAcDXz9ff8a5o69aXkkT9Ia4vExiA


. Upgrade:

> python -m pip install --index-url https://test.pypi.org/simple/ curadoria --upgrade

	. python -m build (depois de alterar o arquivo .toml com a nova versão);
	. python -m twine upload -u __token__ -p [token] --repository testpypi dist/*
	. python -m pip install [...]


> NOTA: é possível upar uma mesma versão sem precisar mudar a versão no .toml 



